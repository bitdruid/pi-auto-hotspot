#!/bin/bash

# Copyright 2023; requires packages: nmap, hostapd, dnsmasq

# Configuration
ap_ssid=$(grep -Po '(?<=^ssid=).*' /etc/hostapd/hostapd.conf)
dhcp_ip='192.168.0.1'
wifi_interfaces=()
free_interface=''
ap_interface=''
network_state=0
ap_state=0
samba=0

# Functions

connector() {
    # Configure and start an Access Point on the specified interface
    # $1 = interface
    # $2 = SSID (optional)

    local interface="$1"
    local ssid="${2:-$ap_ssid}"

    ifconfig "$interface" up
    systemctl stop "wpa_supplicant@$interface"

    # DHCP configuration
    sed -i "s/^#interface .*/interface $interface/g" /etc/dhcpcd.conf
    sed -i "s/^#static ip_address=.*/static ip_address=$dhcp_ip/g" /etc/dhcpcd.conf
    sed -i 's/^#nohook wpa_supplicant/nohook wpa_supplicant/g' /etc/dhcpcd.conf

    # AP configuration
    sed -i "s/^interface=.*/interface=$interface/g" /etc/hostapd/hostapd.conf
    sed -i "s/^interface=.*/interface=$interface/g" /etc/dnsmasq.conf
    sed -i "s/^ssid=.*/ssid=$ssid/g" /etc/hostapd/hostapd.conf
    sed -i "s/^wpa_passphrase=.*/wpa_passphrase=$ssid/g" /etc/hostapd/hostapd.conf

    systemctl start hostapd dnsmasq
    sleep 2
    ip addr flush dev "$interface"
    ip addr del "$dhcp_ip/24" dev "$interface"
    systemctl start nmbd smbd

    echo "-----> AP now running on interface: $interface"
    echo "-----> AP SSID: $ssid"
	get_ap_interface
}

disconnector() {
    # Disconnect and stop the Access Point on the specified interface
    # $1 = interface

    local interface="$1"

    sed -i "s/^interface .*/#interface $interface/g" /etc/dhcpcd.conf
    sed -i "s/^static ip_address=.*/#static ip_address=$dhcp_ip/g" /etc/dhcpcd.conf
    sed -i 's/^nohook wpa_supplicant/#nohook wpa_supplicant/g' /etc/dhcpcd.conf
    systemctl stop dnsmasq hostapd
    ip addr del "$dhcp_ip/24" dev "$interface"
    ip addr flush dev "$interface"
    ifconfig "$interface" down
    ifconfig "$interface" up
    systemctl start "wpa_supplicant@$interface"

	echo "-----> AP closed on interface: $interface"
	get_ap_interface
}

get_all_interfaces() {
    # Find all wireless interfaces and store them in the wifi_interfaces array
    while read -r line; do
        local interface=$(echo "$line" | awk '{print $2'})
        if [[ $interface == 'wlan'* || $interface == 'wlp'* ]]; then
            wifi_interfaces+=("$interface")
        fi
    done < <(iw dev | grep -o 'Interface.*')
}

get_ap_interface() {
	# Find the interface which runs as Access Point
	for i in "${wifi_interfaces[@]}"; do
		if [[ $(iw "$i" info | grep -o "$ap_ssid") ]]; then
			ap_interface="$i"
			break
		fi
	done
}

get_free_interface() {
	# Find a free interface and store it in the free_interface variable
	for i in "${wifi_interfaces[@]}"; do
		# Type should be managed and not AP
		if [[ ! -z $(iw "$i" info | grep -o 'type managed') ]]; then
			# No ssid should be set
			if [[ -z $(iw "$i" info | grep -o 'ssid') ]]; then
				free_interface="$i"
				break
			fi
		fi	
	done
}

repairer() {
    # Check and repair the Access Point

    get_ap_interface
    local repair_state=0

    if ! systemctl status hostapd | grep -q 'Active: active (running)'; then
        echo "-----> hostapd not running -> restart"
        systemctl restart hostapd
        repair_state=1
    fi

    if ! systemctl status dnsmasq | grep -q 'Active: active (running)'; then
        echo "-----> dnsmasq not running -> restart"
        systemctl restart dnsmasq
        repair_state=1
    fi

    if systemctl status "wpa_supplicant@$ap_interface" | grep -q 'Active: active (running)'; then
        echo "-----> wpa_supplicant@$ap_interface running -> stopping"
        systemctl stop "wpa_supplicant@$ap_interface"
        repair_state=1
    fi

    if ! ip a show "$ap_interface" | grep -q "$dhcp_ip"; then
        echo "-----> AP has no static IP -> setting"
        ip a add "$dhcp_ip/24" dev "$ap_interface"
        repair_state=1
    fi

    if ! systemctl status nmbd | grep -q 'Active: active (running)'; then
        echo "-----> Samba Service nmbd not running -> restart"
        systemctl restart nmbd
        repair_state=1
    fi

    if ! systemctl status smbd | grep -q 'Active: active (running)'; then
        echo "-----> Samba Service smbd not running -> restart"
        systemctl restart smbd
        repair_state=1
    fi

    if ! ip link show "$ap_interface" | grep -q 'UP'; then
        echo "-----> Interface $ap_interface is DOWN -> bringing UP"
        ip link set "$ap_interface" up
    fi

    if [[ $repair_state != 1 ]]; then
        echo "-----> AP is working as expected"
    else
        echo "-----> AP repaired"
    fi
}


devicer() {
    # Manage network devices (join, open, close, or repair)
    # $1 = action (join, open, close, or repair)
    # $2 = optional parameter for the interface
    # $3 = optional parameter for the SSID

    local action="$1"
    local interface="$2"
    local ssid="$3"

    case "$action" in
        'join')
            if [[ -z $(iw dev | grep "$ap_ssid") ]]; then
                echo '-----> Hotspot not running. No join possible. Check "iw dev".'
            elif [[ -z ${wifi_interfaces[@]} ]]; then
                echo '-----> No interface available! Check "iw dev".'
            else
                local net_found=0
                mapfile -t wifi_networks < <(iw dev "${wifi_interfaces[0]}" scan | grep -i 'SSID:' | sed 's/SSID://g' | tr -d [:blank:])
                for i in "${!wifi_networks[@]}"; do
                    if [[ -n $(grep -os "${wifi_networks[i]}" /etc/wpa_supplicant/*) ]]; then
                        net_found=1
                        echo "-----> Possible reconnect ${wifi_networks[i]}"
                        echo "-----> Now leaving hotspot and waiting for reconnection. Use cron or 'hotspot -open' for a new AP..."
                        disconnector "${wifi_interfaces[0]}"
                        break
                    fi
                done
                if ((net_found != 1)); then
                    echo '-----> No known networks found. Keeping up hotspot.'
                fi
            fi
            ;;
        'open')
            if [[ ! -z $interface ]]; then
                if [[ -z $(iw "$interface" info | grep -o "$ap_ssid") ]]; then
					echo "-----> Opening AP on specified interface: $interface"
                    connector "$interface" "$ssid"
                    repairer
                else
                    echo "-----> Interface not available for hotspot: $interface"
                fi
				if [[ -z $ap_interface ]]; then
					echo "-----> Could not open AP!"
				fi
            else
                if [[ ! -z $free_interface ]]; then
					echo "-----> First found free interface: $free_interface"
					connector "$free_interface" "piHotspot"
					repairer
					break
				else
					echo "-----> No free interface available!"
                fi
				if [[ -z $ap_interface ]]; then
					echo "-----> Could not open AP!"
				fi
            fi
            ;;
        'close')
            if [[ ! -z $ap_interface ]]; then
                    disconnector "$ap_interface"
            fi
            ;;
        'repair')
            if [[ ! -z $ap_interface ]]; then
				repairer
			else
                echo '-----> No AP active - skipping checkup'
            fi	
            ;;
        *)
            echo "-----> Invalid action: $action"
            ;;
    esac
}


# Main

get_all_interfaces
get_ap_interface
get_free_interface
echo ''

if [[ $1 == '-a' || $1 == '--auto' ]]; then
    # Auto mode: Check network state and take action accordingly
	echo "Automatic AP handling started"

    gateway_ip=$(nmap --script broadcast-dhcp-discover | grep -Po 'Router:(.*)' | grep -E -o '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b')

    if [[ ! -z $gateway_ip ]]; then
        echo "-----> Found external gateway: $gateway_ip"
        network_state=1
        samba=1
    fi

    if [[ ! -z $ap_interface ]]; then
        network_state=2
    fi

    case "$network_state" in
        0)
            echo "-----> No external gateway found. Trying to open AP with Samba"
            devicer open
            ;;
        1)
            echo "-----> External gateway found"
            if [[ $ap_state == 1 ]]; then
                echo "-----> Closing AP"
                devicer close
            else
                echo "-----> No AP needed"
            fi
            ;;
        2)
            echo "-----> AP is active - checking"
            devicer repair
            ;;
    esac
elif [[ $1 == '-j' || $1 == '--join' ]]; then
    echo "Checking for known networks and attempting to reconnect"
    devicer join
elif [[ $1 == '-o' || $1 == '--open' ]]; then
    echo "Attempting to open Access Point with Samba"
    devicer open "$2" "$3"
elif [[ $1 == '-c' || $1 == '--close' ]]; then
    echo "Closing Access Point"
    devicer close
elif [[ $1 == '-r' || $1 == '--repair' ]]; then
    echo "Checking repair of Access Point"
    devicer repair
elif [[ $1 == '-h' || $1 == '--help' ]]; then
    echo "Usage:"
    echo "  [-a, --auto]      Auto mode (default)"
    echo "  [-j, --join]      Check for known networks and attempt to reconnect"
    echo "  [-o, --open]      Open Access Point (manual control)"
    echo "  [-c, --close]     Close Access Point (manual control)"
    echo "  [-r, --repair]    Repair Access Point"
else
    echo "Type -h or --help for help"
fi
echo ''